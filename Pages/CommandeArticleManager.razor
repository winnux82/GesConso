@page "/commandearticle"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@*@using System*@
<PageTitle>Gestion des commandes Articles</PageTitle>
<BlazoredToasts />
<div class="row">
    @*<div class="col-md-6">*@
    <table class="table table-striped">
        <thead>
            <tr>
                @if (CommandeIdSelected != Guid.Empty)
                {

                    <th>Dénomination Article</th>
                    <th>Prix uhTva</th>
                    <th>Quantité</th>
                    <th>Total hTva</th>
                    <th>Total TvaC</th>
                    <th>Sauver</th>
                    <th>Delete</th>
                }
                else
                {
                    <th>ID_Commande</th>
                    <th>ID_Article</th>
                    <th>Quantité</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (CommandeIdSelected != Guid.Empty)
            {
                var totals = new Dictionary<Guid, double>();
         
                foreach (CommandeArticle commandeArticle in StateContainer.CommandeArticles)
                {
                    if (commandeArticle.Id_Commande == CommandeIdSelected)
                    {

                        //Importer la commande
                        GetCommandeFromId(CommandeIdSelected);

                        var isSelected = selected == commandeArticle;
                        var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
                        var article = StateContainer.Articles.FirstOrDefault(a => a.Id == commandeArticle.Id_Article);
                        if (article != null)
                        {
                            double htvaValue = CalculateHtva(article, commandeArticle.Quantite.GetValueOrDefault());
                            double calculatedValue = CalculateTvaC(article, commandeArticle.Quantite.GetValueOrDefault());

                            if (!totals.ContainsKey(CommandeIdSelected))
                            {
                                totals[CommandeIdSelected] = calculatedValue;
                            }
                            else
                            {
                                totals[CommandeIdSelected] += calculatedValue;
                            }

                            <tr @onclick="(() => SelectCommandeArticle(commandeArticle))" style="@(GetRowStyle(commandeArticle))">
                                <td>@article.Denomination</td>
                                <td>@article.PuHtva €</td>

                                <td>
                                    <InputNumber id="quantite" class="form-control" @bind-Value="commandeArticle.Quantite" min="1" />
                                </td>

                                <td>@htvaValue €</td>
                                <td>@calculatedValue €</td>
                                @if (selected is not null)
                                {
                                    @*<button type="button" class="btn btn-info" @onclick="RestoreDeletedCommandeArticle">Restaurer</button>*@
                                    <td>
                                        <button type="button" class="btn btn-info" @onclick="UpdateCommandeArticle"><i class="oi oi-check"></i></button>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" @onclick="DeleteCompleteCommandeArticle"><i class="oi oi-trash"></i></button>
                                    </td>
                                }
                                else
                                {
                                    <td>
                                        <button type="button" class="btn btn-info" disabled><i class="oi oi-check"></i></button>
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" disabled><i class="oi oi-trash"></i></button>
                                    </td>

                                }
                            </tr>
                        }
                    }
                }

                if (totals.ContainsKey(CommandeIdSelected))
                {
                    double total = totals[CommandeIdSelected];
          
                    <tr>
                        <td colspan="3"><strong>Total:</strong></td>
                        <td><strong>@Math.Round(htva, 2)</strong> €</td>
                        <td><strong>@Math.Round(tvac, 2)</strong> €</td>
                        <td></td>
                        <td></td>
                    </tr>
                }
            }
            else
            {
                @foreach (CommandeArticle commandeArticle in StateContainer.CommandeArticles)
                {
                    // Vérifier si la commande correspond à CommandeId

                    var isSelected = selected == commandeArticle;
                    var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
                    <tr @onclick="(() => SelectCommandeArticle(commandeArticle))" style="@(GetRowStyle(commandeArticle))">
                        <td>@commandeArticle.Id_Commande</td>
                        <td>@commandeArticle.Id_Article</td>
                        <td>@commandeArticle.Quantite</td>
                    </tr>

                }
            }


        </tbody>
    </table>


    @*    </div>
    <div class="col-md-6">*@
    <EditForm Model="@commandeArticle">
        <DataAnnotationsValidator />
        @if (CommandeIdSelected == Guid.Empty)
        {
            <div class="row">
                <div class="col-md-8">
                    <label for="commande">Choisissez une commande :</label>
                    @{
                        //Ajout du premier ID par défaut dans la liste
                        //if(commandeArticle.Id_Commande is null)
                        //{
                        //    commandeArticle.Id_Commande = StateContainer.Commandes.FirstOrDefault()?.Id;

                        //}
                    }
                    <InputSelect id="Id_Commande" class="form-control" @bind-Value="@commandeArticle.Id_Commande">
                        @foreach (var commande in StateContainer.Commandes)
                        {
                            var isDeleted = commande.DeletedAt != null;
                            if (isDeleted)
                            {
                                continue;
                            }
                            <option value="@commande.Id">@commande.Id_Date?.ToString("yyyyMMdd hh-mm")</option>
                        }
                    </InputSelect>
                </div>
            </div>
        }


        <div class="row">
            <div class="col-md-8">
                <label for="Id_Article">Choisissez un article :</label>



@*                @{
                    //Ajout du premier ID par défaut dans la liste
                    commandeArticle.Id_Article = StateContainer.Articles.FirstOrDefault()?.Id;
                }*@

                <InputSelect id="Id_Article" class="form-control" @bind-Value="@commandeArticle.Id_Article">
                    @foreach (var article in StateContainer.Articles)
                    {
                        var isDeleted = article.DeletedAt != null;
                        if (isDeleted)
                        {
                            continue;
                        }
                        <option value="@article.Id">@article.Denomination - PuHtva : @article.PuHtva €</option>
                    }
                </InputSelect>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    <label for="quantite">Quantité</label>
                    <InputNumber id="quantite" class="form-control" @bind-Value="commandeArticle.Quantite" min="1" />
                </div>
            </div>
            <div class="col-md-1">

                @if (selected is null)
                {
                    <button type="submit" class="btn btn-warning" @onclick="AddCommandeArticle"><i class="oi oi-cart"></i>Commander</button>
                }
                else
                {
                    <button type="submit" class="btn btn-info" @onclick="UpdateCommandeArticle"><i class="oi oi-check"></i></button>
                }
                @*<button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>*@

            </div>
            <div class="col-md-1">

                @if (selected is not null)
                {
                    @*<button type="button" class="btn btn-info" @onclick="RestoreDeletedCommandeArticle">Restaurer</button>*@
                    <button type="button" class="btn btn-danger" @onclick="DeleteCompleteCommandeArticle"><i class="oi oi-trash"></i></button>
                }

            </div>
        </div>
    </EditForm>

    @*    @if (commandeArticle.CreatedAt is not null)
    {
    <p>Créé : @commandeArticle.CreatedAt</p>
    <p>Modifié : @commandeArticle.UpdatedAt</p>
    }
    @if (commandeArticle.DeletedAt is not null)
    {
    <p>Effacé : @commandeArticle.DeletedAt</p>

    }*@

</div>


@code {

    CommandeArticle commandeArticle = new CommandeArticle();
    Commande commandeImported = new Commande();

    private CommandeArticle? selected = null;

    [Parameter]
    public Action? OnCommandeArticleSelected { get; set; }

    private Action? OnCommandeArticleUpdated;


    [Parameter]
    public Guid CommandeIdSelected { get; set; }

    [Parameter]
    public EventCallback<double> PuHtvaCalculated { get; set; }

    public Guid OnSelectCommande = Guid.Empty;
    List<double> calculTotal = new List<double>();

    private double htva = 0;
    private double tvac = 0;


    protected override void OnInitialized()
    {
        this.OnCommandeArticleUpdated = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
        this.OnCommandeArticleSelected = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };

        StateContainer.OnCommandeArticleUpdated += this.OnCommandeArticleUpdated;
        StateContainer.OnCommandeArticleSelected += this.OnCommandeArticleSelected;
    }


    protected override async Task OnParametersSetAsync()
    {
        await GetCommandeArticle();
        ComputeTva();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await LoadDataAsync<List<Commande>>("api/commande/getall", commandes =>
        {
            StateContainer.Commandes = commandes;
        });

        await LoadDataAsync<List<Article>>("api/article/getall", articles =>
        {
            StateContainer.Articles = articles;
        });

        //await LoadDataAsync<List<CommandeArticle>>($"api/commandearticle/getall?commandId={this.CommandeIdSelected}", commandeArticles =>
        //{
        //    StateContainer.CommandeArticles = commandeArticles;
        //});

        await InvokeAsync(StateHasChanged);
    }

    private void ComputeTva()
    {
        this.tvac = 0.0;
        this.htva = 0.0;

        foreach(var e in StateContainer.CommandeArticles)
        {
            var article = StateContainer.Articles.First(x => x.Id == e.Id_Article);
            htva += (double)(e.Quantite ?? 0) * (article.PuHtva ?? 0);

        }

        tvac += htva + htva * 0.21;

        commandeImported.PrixHtva = Math.Round(htva, 2);
        commandeImported.PrixTvaC = Math.Round(tvac, 2);
    }

    private async Task LoadDataAsync<T>(string requestUri, Action<T> setDataAction)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}{requestUri}");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var data = await response.Content.ReadFromJsonAsync<T>();

                if (data != null)
                {
                    setDataAction(data);
                }
            }
            else
            {
                Console.WriteLine("Error");
            }
        }
    }

    public async Task GetCommandeArticle()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/commandearticle/getall?commandId={this.CommandeIdSelected}");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var comArticles = await response.Content.ReadFromJsonAsync<List<CommandeArticle>>();

                if (comArticles != null)
                {
                    StateContainer.CommandeArticles = comArticles;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }



    // Ajouter une commande d'article
    private async Task AddCommandeArticle()
    {
        var newCommandeArticle = new CommandeArticle
            {
                Id = Guid.NewGuid(),
                //Id_Commande = CommandeIdSelected,
                Id_Commande = CommandeIdSelected != Guid.Empty ? CommandeIdSelected : commandeArticle.Id_Commande,
                Id_Article = commandeArticle.Id_Article,
                Quantite = commandeArticle.Quantite,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,

            };



        Console.WriteLine(newCommandeArticle);
        //if ((commandeArticle.Id_Article != null && CommandeIdSelected != Guid.Empty) || commandeArticle.Id_Commande != null)

        if (newCommandeArticle.Id_Article != null && newCommandeArticle.Id_Commande != null)
        {

            var content = JsonContent.Create(newCommandeArticle);

            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commandearticle/add");
            requestMsg.Content = content;
            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    ToastService.ShowSuccess("Article ajouté à la commande! ");
                    StateContainer.CommandeArticles?.Add(newCommandeArticle);

                    await UpdateCommande();
                    UnSelectCommandeArticle();

                }
                else
                {
                    ToastService.ShowError("Une erreur s'est produite.");
                }
            }

        }
        else
        {
            ToastService.ShowError("Id_Article || Id_Commande NULL.");

        }


        Reset();
    }

    // Mettre à jour une commande d'article
    private async Task UpdateCommandeArticle()
    {
        if (selected is null)
        {
            return;
        }

        var commandeArticleUpdate = new CommandeArticle
            {
                Id = selected.Id,
                Id_Article = commandeArticle.Id_Article,
                Id_Commande = CommandeIdSelected,
                Quantite = commandeArticle.Quantite,
                CreatedAt = commandeArticle.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = commandeArticle.DeletedAt,
            };

        Console.WriteLine("Commande Article Update:", commandeArticleUpdate);
        Console.WriteLine($"ID: {commandeArticleUpdate.Id_Commande}");

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commandearticle/update");
        requestMsg.Content = JsonContent.Create(commandeArticleUpdate);

        using var msg = await HttpClient.SendAsync(requestMsg);

        if (msg.IsSuccessStatusCode)
        {
            var index = StateContainer.CommandeArticles.IndexOf(selected);
            if (index != -1)
            {
                StateContainer.CommandeArticles[index] = commandeArticleUpdate;
                ToastService.ShowSuccess($"Article de la commande {commandeArticleUpdate.Id_Commande} mis à jour!");
                await UpdateCommande();

                //await UpdateCommandeImportPrices();
                //await UpdateCommande();
                UnSelectCommandeArticle();
            }
        }
    }


    // RESET
    private void Reset()
    {
        commandeArticle = new CommandeArticle();
        selected = null;

    }

    // Delete Commande d'Article
    private async Task DeleteCommandeArticle()
    {
        if (selected is null)
        {
            return;
        }

        var commandeArticleUpdate = new CommandeArticle
            {
                Id = this.selected.Id,
                Id_Article = commandeArticle.Id_Article,
                Id_Commande = commandeArticle.Id_Commande,
                Quantite = commandeArticle.Quantite,
                CreatedAt = commandeArticle.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,
            };

        Console.WriteLine(commandeArticleUpdate);
        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commandearticle/update");
        requestMsg.Content = JsonContent.Create(commandeArticleUpdate);

        using (var response = await HttpClient.SendAsync(requestMsg))
        {
            if (response.IsSuccessStatusCode)
            {
                var index = StateContainer.CommandeArticles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.CommandeArticles[index] = commandeArticleUpdate;
                    UnSelectCommandeArticle();
                    ToastService.ShowWarning("Article de la commande effacé");
                }
                await InvokeAsync(StateHasChanged);
            }
        }
    }
    // Restaurer Commande d'Article
    private async Task RestoreDeletedCommandeArticle()
    {
        if (selected is null)
        {
            return;
        }

        var commandeArticleUpdate = new CommandeArticle
            {
                Id = this.selected.Id,
                Id_Article = commandeArticle.Id_Article,
                Id_Commande = commandeArticle.Id_Commande,
                Quantite = commandeArticle.Quantite,
                CreatedAt = commandeArticle.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,
            };

        Console.WriteLine(commandeArticleUpdate);
        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commandearticle/update");
        requestMsg.Content = JsonContent.Create(commandeArticleUpdate);

        using (var response = await HttpClient.SendAsync(requestMsg))
        {
            if (response.IsSuccessStatusCode)
            {
                var index = StateContainer.CommandeArticles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.CommandeArticles[index] = commandeArticleUpdate;
                    UnSelectCommandeArticle();
                    ToastService.ShowInfo("Article de la commande restauré");
                }
            }
            await InvokeAsync(StateHasChanged);
        }
    }


    // Effacer un Article
    private async Task DeleteCompleteCommandeArticle()
    {
        if (selected is null)
        {
            return;
        }
        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }
        else
        {
            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commandearticle/delete");
            requestMsg.Content = JsonContent.Create(selected);
            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    StateContainer.CommandeArticles.Remove(selected);
                    ToastService.ShowWarning("Article complètement effacé de la commande");

                    UnSelectCommandeArticle();
                    await UpdateCommande();



                }
                await InvokeAsync(StateHasChanged);
            }

        }
    }

    // Selectionner une Commande d'article
    private void SelectCommandeArticle(CommandeArticle commArticle)
    {

        StateContainer.SelectedCommandeArticle = commArticle;
        selected = commArticle;
        commandeArticle = commArticle;
        InvokeAsync(StateHasChanged);
    }



    private void UnSelectCommandeArticle()
    {
        selected = null;
        Reset();
    }
    private string GetRowStyle(CommandeArticle commandeArticle)
    {
        return selected == commandeArticle ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }



    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cet article ??");
        return confirmed;
    }


    private double CalculateHtva(Article article, int quantite)
    {
        double puHtva = article.PuHtva ?? 0.0;
        double calculatedValue = puHtva * quantite;
        PuHtvaCalculated.InvokeAsync(calculatedValue);
        return Math.Round(calculatedValue, 2);



    }

    private double CalculateTvaC(Article article, int quantite)
    {
        double puHtva = article.PuHtva ?? 0.0;
        double calculatedValue = puHtva * quantite;
        double tva = calculatedValue * 0.21;
        calculatedValue += tva;
        return Math.Round(calculatedValue, 2);


    }
    void GetCommandeFromId(Guid CommandeIdSelected)
    {
        // Rechercher la commande dans le stateContainer à partir de l'ID
        var commande = StateContainer.Commandes.FirstOrDefault(c => c.Id == CommandeIdSelected);

        if (commande != null)
        {
            // Sauvegarder la commande dans commandeImport
            commandeImported = commande;
        }
    }

    // Mettre à jour une commande
    private async Task UpdateCommande()
    {
        ComputeTva();

        var commandeUpdate = new Commande
            {
                Id = commandeImported.Id,
                Id_Date = commandeImported.Id_Date,
                DateCommande = commandeImported.DateCommande,
                PrixHtva = commandeImported.PrixHtva,
                PrixTvaC = commandeImported.PrixTvaC,
                CreatedAt = commandeImported.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = commandeImported.DeletedAt,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Commandes.IndexOf(commandeImported);
                StateContainer.Commandes[index] = commandeUpdate;
                StateContainer.NotifyCommandeArticleUpdated();
                StateContainer.NotifyCommandesUpdated();
                ToastService.ShowSuccess("Commande mise à jour!");

            }
        }
    }
}
