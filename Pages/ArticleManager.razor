@page "/article"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService

@*@using Microsoft.AspNetCore.Components.Forms*@

<PageTitle>Gestion des articles</PageTitle>
<BlazoredToasts SuccessIcon="fa fa-thumbs-up" />

<h1>Gestion des articles</h1>


<Button Color="Color.Primary" Clicked="@Reset" Class="m-2">Ajouter un Article</Button>
@if (selected is not null)
{
    <Button Color="Color.Secondary" Clicked="@ShowModal">Modifier un Article</Button>
}

<Modal @ref="modalAjoutArticle">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@(selected is null ? "Ajout d'un article" : "Modification d'un article")</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <EditForm Model="@article" OnValidSubmit="@(selected is null ? (Func<Task>)AddArticle : UpdateArticle)">


                    <DataAnnotationsValidator />


                    <Field>

                        <div class="form-group">
                            <label for="denomination">Dénomination</label>
                            <div class="col-sm-10">
                                <InputText id="denomination" type="text" class="form-control" placeholder="Obligatoire" @bind-Value="article.Denomination" autofocus />
                                <ValidationMessage For="@(() => article.Denomination)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="description">Description</label>
                            <div class="col-sm-10">
                                <InputText id="description" type="text" class="form-control" placeholder="" @bind-Value="article.Description" />
                                <ValidationMessage For="@(() => article.Description)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="puHtva">PuHtva</label>
                            <div class="col-sm-10">
                                <InputNumber id="puHtva" type="text" class="form-control" placeholder="@((selected is null) ? "Obligatoire" : "")" @bind-Value="article.PuHtva" />
                                <ValidationMessage For="@(() => article.PuHtva)" />
                            </div>
                        </div>
                    </Field>
                    <div>
                        @if (article.CreatedAt is not null)
                    {
                        <p>Créé : @article.CreatedAt</p>
                        <p>Modifié : @article.UpdatedAt</p>
                    }
                    @if (article.DeletedAt is not null)
                    {
                        <p>Effacé : @article.DeletedAt</p>
                    }
                </div>
                <button type="submit" class="btn btn-primary mt-2"><i class="oi oi-check"></i> @((selected is null) ? "Ajouter" : "Update")</button>
            </EditForm>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>


            <div class="buttonsGroup m-1 ml-auto" style="display: flex; gap: 5px; justify-content: flex-end;">
                @*
                <button type="button" class="btn btn-secondary" @onclick="Reset">
                <i class="oi oi-loop-circular"></i>
                Reset
                </button>*@

                @if (selected is not null)
                {
                    @if (article.DeletedAt is null)
                    {
                        <button type="button" class="btn btn-danger" @onclick="DeleteArticle"> <i class="oi oi-trash"></i> Delete</button>


                        @*                    <Button Color="Color.Danger" Clicked="DeleteArticle">
                <i class="fas fa-trash"></i> Delete
                </Button>*@
                    }
                    else
                    {
                        <button type="button" class="btn btn-info" @onclick="RestoreDeletedArticle"><i class="oi oi-action-undo"></i>Restaurer</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteCompleteArticle"><i class="oi oi-trash"></i> Effacer définitivement</button>
                    }
                }

            </div>
        </ModalFooter>
    </ModalContent>
</Modal>




<div class="row">
    <div class="col-md-9">
        <div class="highlight">
            <h2>Admin</h2>
        </div>
        @if (isLoading)
        {
            <div class="skeleton-loader">
                <div class="loader"></div>
                <div>Loading...</div>
            </div>
        }
        else
        {
            //fix the header
            <Table Hoverable Striped FixedHeader FixedHeaderTableHeight="900px">

            <TableHeader>
            @*<TableHeader ThemeContrast="ThemeContrast.Light">*@
                <TableRow>

                    <TableHeaderCell>ID</TableHeaderCell>
                    <TableHeaderCell>Dénomination</TableHeaderCell>
                    <TableHeaderCell>Description</TableHeaderCell>
                    <TableHeaderCell>PuHtva</TableHeaderCell>
                    <TableHeaderCell>DeletedAt</TableHeaderCell>
                </TableRow>

            </TableHeader>
            <TableBody>

                @foreach (Article article in StateContainer.Articles)
                    {
                        var isSelected = selected == article;
                        var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;

                        <TableRow @onclick="(() => SelectArticle(article))" style="@GetRowStyle(article)">
                            <TableRowHeader>@article.Id</TableRowHeader>
                  
                            <TableRowCell>@article.Denomination</TableRowCell>
                            <TableRowCell>@article.Description</TableRowCell>
                            <TableRowCell>@article.PuHtva</TableRowCell>
                            <TableRowCell>@article.DeletedAt</TableRowCell>

                        </TableRow>
                    }
                </TableBody>
            </Table>
        }
        <div class="highlight">
            <h2>User</h2>
        </div>
        @if (isLoading)
        {
            <div class="skeleton-loader">
                <div class="loader"></div>
                <div>Loading...</div>
            </div>
        }
        else


        {
            <Table Hoverable Striped FixedHeader FixedHeaderTableHeight="400px">

            <TableHeader >
                <TableRow>


                    <TableHeaderCell>Dénomination</TableHeaderCell>
                    <TableHeaderCell>Description</TableHeaderCell>
                    <TableHeaderCell>PuHtva</TableHeaderCell>

                </TableRow>

            </TableHeader>
            <TableBody>

                @foreach (Article article in StateContainer.Articles)
                    {
                        // Vérifier si l'article est supprimé
                        var isDeleted = article.DeletedAt != null;
                        if (isDeleted)
                        {
                            continue;
                        }

                        var isSelected = selected == article;
                        var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;

                        <TableRow @onclick="(() => SelectArticle(article))" style="@GetRowStyle(article)">
                            <TableRowHeader>@article.Denomination</TableRowHeader>
                            
                            <TableRowCell>@article.Description</TableRowCell>
                            <TableRowCell>@article.PuHtva</TableRowCell>
  

                        </TableRow>

                    }
                </TableBody>
            </Table>
        }
    </div>

</div>

@code {
    Article article = new Article();
    private Article? selected = null;

    [Parameter]
    public Action? OnArticleSelected { get; set; }

    private Action? OnArticleUpdated;

    protected override async Task OnInitializedAsync()
    {
        this.OnArticleUpdated = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
        this.OnArticleSelected = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };

        StateContainer.OnArticleUpdated += this.OnArticleUpdated;
        StateContainer.OnArticleSelected += this.OnArticleSelected;
        await GetArticles();
    }

    private bool isLoading = true;


    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    // if (firstRender)
    //    //{
    //    //    this.OnArticleUpdated = async () =>
    //    //    {
    //    //        await InvokeAsync(StateHasChanged);
    //    //    };
    //    //    this.OnArticleSelected = async () =>
    //    //    {
    //    //        await InvokeAsync(StateHasChanged);
    //    //    };

    //    //    StateContainer.OnArticleUpdated += this.OnArticleUpdated;
    //    //    StateContainer.OnArticleSelected += this.OnArticleSelected;
    //    //    await GetArticles();
    //    // }
    //}

    public async Task GetArticles()
    {
        isLoading = true; // Activer le loader

        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/article/getall");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var articles = await response.Content.ReadFromJsonAsync<List<Article>>();

                if (articles != null)
                {
                    StateContainer.Articles = articles;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        isLoading = false; // Désactiver le loader
    }


    private void NewArticle()
    {
        Reset();
    }

    // Ajouter un article
    private async Task AddArticle()
    {
        var newArticle = new Article
            {
                Id = Guid.NewGuid(),
                Denomination = article.Denomination,
                Description = article.Description,
                PuHtva = article.PuHtva,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,
            };

        var content = JsonContent.Create(newArticle);

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/add");
        requestMsg.Content = content;
        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                StateContainer.Articles?.Add(newArticle);
                Reset();
                await HideModal();
                ToastService.ShowSuccess("Article ajouté!");

            }
            else
            {
                ToastService.ShowError("Une erreur s'est produite.");
            }
        }
    }

    // Mettre à jour un article
    private async Task UpdateArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {
                Id = this.selected.Id,
                Denomination = article.Denomination,
                Description = article.Description,
                PuHtva = article.PuHtva,
                CreatedAt = article.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = article.DeletedAt,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    ToastService.ShowSuccess("Article mis à jour!");
                    await HideModal();

                }
            }
        }
    }

    // RESET
    private void Reset()
    {
        article = new Article();
        selected = null;
        ShowModal();
    }

    // Delete Article
    private async Task DeleteArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {

                Id = this.selected.Id,
                Denomination = article.Denomination,
                Description = article.Description,
                PuHtva = article.PuHtva,
                CreatedAt = article.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,

            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    await HideModal();
                    ToastService.ShowWarning("Article effacé");
                }
            }
        }
    }

    // Restaurer un Article
    private async Task RestoreDeletedArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {

                Id = this.selected.Id,
                Denomination = article.Denomination,
                Description = article.Description,
                PuHtva = article.PuHtva,
                CreatedAt = article.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,

            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    await HideModal();
                    ToastService.ShowInfo("Article Restauré");
                }
            }
        }
    }

    // Effacer un Article
    private async Task DeleteCompleteArticle()
    {
        if (selected is null)
        {
            return;
        }

        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }

        try
        {
            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/delete");
            requestMsg.Content = JsonContent.Create(selected);

            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    StateContainer.Articles.Remove(selected);
                    UnSelectArticle();
                    await HideModal();
                    ToastService.ShowWarning("Article complètement effacé");
                }
                else
                {
                    string errorMessage = await msg.Content.ReadAsStringAsync();
                    await HideModal();
                    ToastService.ShowError(errorMessage);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Une erreur s'est produite lors de la suppression de l'article.");
            Console.WriteLine(ex);
        }
    }

    // Selectionner un article
    private void SelectArticle(Article art)
    {

        StateContainer.SelectedArticle = art;
        selected = art;
        article = art;
        InvokeAsync(StateHasChanged);
        //OnArticleSelected?.Invoke(article);

        //_denomination = article?.Denomination ?? string.Empty;
        //_description = article?.Description ?? string.Empty;
        //_puhtva = article?.PuHtva;
        //_createdAt = article?.CreatedAt;
        //_updatedAt = article?.UpdatedAt;
        //_deletedAt = article?.DeletedAt;
    }

    private void UnSelectArticle()
    {
        selected = null;
        Reset();
    }

    private string GetRowStyle(Article article)
    {
        return selected == article ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }

    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cet article ??");
        return confirmed;
    }


    // reference to the modal component
    private Modal? modalAjoutArticle;

    private Task ShowModal()
    {
        return modalAjoutArticle?.Show() ?? Task.CompletedTask;
    }

    private Task HideModal()
    {
        return modalAjoutArticle?.Hide() ?? Task.CompletedTask;
    }


    //public void Dispose()
    //{
    //    StateContainer.OnArticlesUpdated -= this.OnArticlesUpdated;
    //    StateContainer.OnArticleSelected -= this.OnArticleSelected;
    //}
}
