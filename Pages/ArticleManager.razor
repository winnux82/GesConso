@page "/article"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService


@using Blazored.Toast.Services;
@using GesConso.Entities
@*@using System*@


<PageTitle>Gestion des articles</PageTitle>

<h1>Gestion des articles</h1>
<button @onclick="ShowToast">Afficher un toast</button>
<BlazoredToasts SuccessIcon="fa fa-thumbs-up" />

<button class="btn btn-info" @onclick="@(() => ToastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
<button class="btn btn-success" @onclick="@(() => ToastService.ShowSuccess("I'm a SUCCESS message with a custom title"))">Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => ToastService.ShowWarning("I'm a WARNING message"))">Warning Toast</button>
<button class="btn btn-danger" @onclick="@(() => ToastService.ShowError("I'm an ERROR message"))">Error Toast</button>


<div class="row">
    <div class="col-md-6">

        <div class="highlight">
            <h2>Admin</h2>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Dénomination</th>
                    <th>Description</th>
                    <th>PuHtva</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var article in StateContainer.Articles)
                {
                    var isSelected = selected == article;
                    var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;

                    <tr @onclick="(() => SelectArticle(article))" style="@GetRowStyle(article)">
                        <td>@article.Id</td>
                        <td>@article.Denomination</td>
                        <td>@article.Description</td>
                        <td>@article.PuHtva</td>
                    </tr>
                }


            </tbody>
        </table>
        <div class="highlight">
            <h2>User</h2>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    @*<th>ID</th>*@
                    <th>Dénomination</th>
                    <th>Description</th>
                    <th>PuHtva</th>
                </tr>
            </thead>
            <tbody>

                    @foreach (var article in StateContainer.Articles)
                    {
                        // Vérifier si l'article est supprimé
                        var isDeleted = article.DeletedAt != null;

                        // Ignorer les articles supprimés
                        if (isDeleted)
                        {
                            continue;
                        }

                        var isSelected = selected == article;
                        var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;

                        <tr @onclick="(() => SelectArticle(article))" style="@style">
                            <td>@article.Denomination</td>
                            <td>@article.Description</td>
                            <td>@article.PuHtva</td>
                        </tr>
                    }




            </tbody>
        </table>


    </div>
    <div class="col-md-6">
        <form>
            <div class="form-group">
                <label for="denomination">Dénomination</label>
                <input id="denomination" type="text" class="form-control" @bind="_denomination" />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <input id="description" type="text" class="form-control" @bind="_description" />
            </div>
            <div class="form-group">
                <label for="puHtva">PuHtva</label>
                <input id="puHtva" type="number" class="form-control" @bind="_puhtva" />
            </div>


            <div>
                @if (_createdAt is not null)
                {
                    <p>Créé : @_createdAt</p>
                    <p>Modifié : @_updatedAt</p>
                }
                @if (_deletedAt is not null)
                {
                    <p>Effacé : @_deletedAt</p>

                }
            </div>



            <div class="buttonsGroup m-1 ml-auto" style="display: flex; gap: 5px; justify-content: flex-end;">
                @if (selected is null)
                {
                    <button type="button" class="btn btn-primary" @onclick="AddArticle">Ajouter</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="UpdateArticle">Sauver</button>
                }
                <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>

                @if (selected is not null)
                {
                    @if (_deletedAt is null)
                    {
                        <button type="button" class="btn btn-danger" @onclick="DeleteArticle">Delete</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-info" @onclick="RestoreDeletedArticle">Restaurer</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteCompleteArticle">Effacer définitivement</button>
                    }
                }

            </div>



        </form>
    </div>

</div>


@code {
    Article article = new Article();
    private Article? selected = null;

    private string _denomination = string.Empty;
    private string _description = string.Empty;
    private double? _puhtva = null;
    private DateTime? _createdAt = null;
    private DateTime? _updatedAt = null;
    private DateTime? _deletedAt = null;


    [Parameter]
    public Action<Article?>? OnArticleSelected { get; set; }
    private bool isLoading = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            var requestMsg = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/article/getall");

            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    var articles = await msg.Content.ReadFromJsonAsync<List<Article>>();
                    if (articles != null)
                    {
                        StateContainer.Articles = articles;
                        await InvokeAsync(StateHasChanged);
                        isLoading = false; 
                    }
                }
                else
                {
                    // Gérer l'échec de la requête
                }
            }
        }
    }



    //TOAST TEST
    private void ShowToast()
    {
        ToastService.ShowSuccess("Opération réussie !");
    }


    // Ajouter un article
    private async Task AddArticle()
    {
        var newArticle = new Article
            {
                Id = Guid.NewGuid(),
                Denomination = _denomination,
                Description = _description,
                PuHtva = _puhtva,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,

    };

        var content = JsonContent.Create(newArticle);

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/add");
        requestMsg.Content = content;

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Article ajouté!");

            }
            else
            {
                ToastService.ShowError("Une erreur s'est produite.");
            }
        }

        StateContainer.Articles?.Add(newArticle);

        Reset();
    }

    // Mettre à jour un article
    private async Task UpdateArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {
                Id = this.selected.Id,
                Denomination = _denomination,
                Description = _description,
                PuHtva = _puhtva,
                CreatedAt = _createdAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = _deletedAt,
            };

        Console.WriteLine("Article Update:");
        Console.WriteLine($"ID: {articleUpdate.Id}");
        Console.WriteLine($"Denomination: {articleUpdate.Denomination}");
        Console.WriteLine($"Description: {articleUpdate.Description}");
        Console.WriteLine($"PuHtva: {articleUpdate.PuHtva}");

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    ToastService.ShowSuccess("Article mis à jour!");
                }
            }
        }
    }



    // RESET
    private void Reset()
    {
        _denomination = string.Empty;
        _description = string.Empty;
        _puhtva = 0;
        _createdAt = null;
        _updatedAt = null;
        _deletedAt = null;
        selected = null;

    }

    // Delete Article 
    private async Task DeleteArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {
                Id = this.selected.Id,
                Denomination = _denomination,
                Description = _description,
                PuHtva = _puhtva,
                CreatedAt = _createdAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    ToastService.ShowWarning("Article effacé");
                }
            }
        }
    }
    // Restaurer un Article
    private async Task RestoreDeletedArticle()
    {
        if (selected is null)
        {
            return;
        }

        var articleUpdate = new Article
            {
                Id = this.selected.Id,
                Denomination = _denomination,
                Description = _description,
                PuHtva = _puhtva,
                CreatedAt = _createdAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/update");
        requestMsg.Content = JsonContent.Create(articleUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Articles.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Articles[index] = articleUpdate;
                    UnSelectArticle();
                    ToastService.ShowInfo("Article Restauré");
                }
            }
        }
    }
    // Effacer un Article
    private async Task DeleteCompleteArticle()
    {
        if (selected is null)
        {
            return;
        }

        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }

        try
        {
            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/article/delete");
            requestMsg.Content = JsonContent.Create(selected);

            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    StateContainer.Articles.Remove(selected);
                    UnSelectArticle();
                    ToastService.ShowWarning("Article complètement effacé");
                }
                else
                {
                    // Si requête échoue
                    string errorMessage = await msg.Content.ReadAsStringAsync();
                    ToastService.ShowError(errorMessage);
                }
            }
        }
        catch (Exception ex)
        {
                        ToastService.ShowError("Une erreur s'est produite lors de la suppression de l'article.");
        }
    }



    // Selectionner un article
    private void SelectArticle(Article article)
    {
        selected = article;
        OnArticleSelected?.Invoke(article);

        _denomination = article?.Denomination ?? string.Empty;
        _description = article?.Description ?? string.Empty;
        _puhtva = article?.PuHtva;
        _createdAt = article?.CreatedAt;
        _updatedAt = article?.UpdatedAt;
        _deletedAt = article?.DeletedAt;
    }

    private void UnSelectArticle()
    {
        selected = null;
        Reset();
    }
    private string GetRowStyle(Article article)
    {
        return selected == article ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }

    //private async Task<bool> ShowConfirmationDialog(string message)
    //{
    //    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", message);
    //    return confirmed;
    //}

    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cet article ??");
        return confirmed;
    }


}
