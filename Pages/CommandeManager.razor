@page "/commande"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@*@using System*@


<PageTitle>Gestion des commandes</PageTitle>
<BlazoredToasts />

<h1>Gestion des commandes</h1>

<button class="btn btn-primary" @onclick="NewCommande"><i class="oi oi-plus"></i> Nouvelle Commande</button>


<div class="row">
    <div class="col-md-4">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Commande</th>
                    @*<th>ID_Date</th>*@
                    <th>Date de la Commande</th>
                    <th>Prix Htva</th>
                    <th>Prix TvaC</th>
                    <th>Date Delete</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (Commande commande in StateContainer.Commandes)
                {
                    var isSelected = StateContainer.SelectedCommande?.Equals(commande) ?? false;
                    var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;



                    <tr @onclick="(() => SelectCommande(commande))">
                        <td>@commande.Id</td>
                        <td>
                            @if (commande.Id_Date != null)
                            {
                                @(((DateTime)commande.Id_Date).ToString("yyyyMMdd"))
                            }
                        </td>

                        @*<td>@commande.Id_Date</td>*@
                        <td>@commande.DateCommande</td>
                        <td>@commande.PrixHtva €</td>
                        <td>@commande.PrixTvaC €</td>
                        <td>@commande.DeletedAt</td>

                    </tr>

                }

            </tbody>
        </table>
    </div>
    <div class="col-md-12">
        <EditForm Model="@commande" OnValidSubmit="@(selected is null ? (Func<Task>)AddCommande : UpdateCommande)">
            <DataAnnotationsValidator />
            @if (commande.Id is not null)
            {
                <div class="row">
                    <div class="col-md-6">
                        <div class="ml-5" style="margin-left: 40px;">
                            @if (commande.Id_Date is not null)
                            {
                                <h3>Détails Commande : @commande.Id_Date?.ToString("yyyyMMdd")</h3>
                            }
                            <h4>Ajout d'un article</h4>
                            @if (_commandeVisibility == true)
                            {
                                <CommandeArticleManager CommandeIdSelected="@(commande.Id.Value)" />

                            }
                        </div>
                    </div>
                </div>
            }
            <div>
                <div class="col-sm-2">
@*                    <div class="form-group">
                        <label for="prixHtva">prixHtva</label>
                        <input id="prixHtva" type="text" class="form-control" @bind="commande.PrixHtva" />
                    </div>
                    <div class="form-group">
                        <label for="prixTvaC">prixTvaC</label>
                        <input id="prixTvaC" type="text" class="form-control" @bind="commande.PrixTvaC" />
                    </div>*@
                    <div class="form-group">
                        <label for="date">Date et heure de la Commande</label>
                        <input id="date" type="datetime-local" class="form-control" @bind="@commande.DateCommande" />
                        @*<InputDate id="date" class="form-control" @bind-Value="@commande.DateCommande" />*@
                    </div>
                </div>
                @if (commande.CreatedAt is not null)
                {
                    <p>Créé : @(commande.CreatedAt ?? DateTime.MinValue)</p>
                    <p>Modifié : @(commande.UpdatedAt ?? DateTime.MinValue)</p>
                }
@*                @if (commande.DeletedAt is not null)
                {
                    <p>Effacé : @commande.DeletedAt</p>
                }*@
                <div class="buttonsGroup mt-3 " style="display: flex; gap: 5px; justify-content: flex-end;">
                    @*                @if (selected is null)
                    {
                    <button type="button" class="btn btn-primary" @onclick="AddCommande"><i class="oi oi-plus"></i> Ajouter</button>
                    }
                    else
                    {
                    <button type="button" class="btn btn-danger" @onclick="UpdateCommande">Sauver</button>
                    }*@
                    <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
                    @if (selected is not null)
                    {
                        @if (commande.DeletedAt is null)
                        {
                            <button type="button" class="btn btn-danger" @onclick="DeleteCommande">Delete</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-info" @onclick="RestoreDeletedCommande">Restaurer</button>
                            <button type="button" class="btn btn-danger" @onclick="DeleteCompleteCommande">Effacer définitivement</button>
                        }
                    }

                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-2">
                <i class="oi oi-check"></i>
                @((selected is null) ? "Ajouter" : "Update")
            </button>
        </EditForm>
    </div>
    @*<div class="col-md-6">*@
</div>

@code {
    Commande commande = new Commande();
    private Commande? selected = null;
    
    private bool _commandeVisibility = false;
    public void HandlePuHtvaCalculated(double calculatedValue)
    {
        _PuHtvaValue = calculatedValue;
    }
    [Parameter]
    public Action? OnCommandeSelected { get; set; }
    private Action? OnCommandeUpdated;

    [Parameter]
    public double _PuHtvaValue { get; set; }


    private double PrixTotal { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this.OnCommandeUpdated = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
        this.OnCommandeSelected = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };

        StateContainer.OnCommandeUpdated += this.OnCommandeUpdated;
        StateContainer.OnCommandeSelected += this.OnCommandeSelected;
        await GetCommandes();
    }

    public async Task GetCommandes()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/commande/getall");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var commandes = await response.Content.ReadFromJsonAsync<List<Commande>>();

                if (commandes != null)
                {
                    StateContainer.Commandes = commandes;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }
    private async Task NewCommande()
    {
        await Reset();
    }

    private async Task AddCommande()
    {
        var newCommande = new Commande
            {
                Id = Guid.NewGuid(),
                Id_Date = DateTime.Now,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,

            };

        var content = JsonContent.Create(newCommande);

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/add");
        requestMsg.Content = content;

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Commande ajoutée!");
                StateContainer.Commandes?.Add(newCommande);
            }
            else
            {
                ToastService.ShowError("Une erreur s'est produite.");
            }
        }
        await Reset();
    }

    // Mettre à jour une commande
    private async Task UpdateCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {
                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = commande.DeletedAt,
            };


        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Commandes.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Commandes[index] = commandeUpdate;

                    StateContainer.NotifyCommandesUpdated();

                }
                ToastService.ShowSuccess("Commande mise à jour!");
                await Reset();
            }
        }
    }



    // Delete Commande
    private async Task DeleteCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {

                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                //var index = StateContainer.Commandes.IndexOf(selected);
                //if (index != -1)
                //{
                //    StateContainer.Commandes[index] = commandeUpdate;
                //}
                ToastService.ShowWarning("Commande effacée");
                await Reset();

            }
        }
    }
    // Delete Commande
    private async Task RestoreDeletedCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {

                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                //var index = StateContainer.Commandes.IndexOf(selected);
                //if (index != -1)
                //{
                //    StateContainer.Commandes[index] = commandeUpdate;
                //    UnSelectCommande();
                //}
                ToastService.ShowInfo("Commande restaurée");
                await Reset();
            }
        }
    }
    // Effacer une Commande
    private async Task DeleteCompleteCommande()
    {
        if (selected is null)
        {
            return;
        }
        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }
        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/delete");
        requestMsg.Content = JsonContent.Create(selected);
        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                StateContainer.Commandes.Remove(selected);
                UnSelectCommande();
                ToastService.ShowWarning("Commande complètement effacée");
                await Reset();
            }
            else
            {
                string errorMessage = await msg.Content.ReadAsStringAsync();
                ToastService.ShowError(errorMessage);
            }
        }
    }
    // RESET
    private async Task Reset()
    {

        UnSelectCommande();
        await InvokeAsync(StateHasChanged);
        await GetCommandes();
    }
    // Selectionner une commande
    private void SelectCommande(Commande comm)
    {
        StateContainer.SelectedCommande = comm;
        selected = comm;
        commande = comm;
        _commandeVisibility = true;
    }

    private void UnSelectCommande()
    {
        StateContainer.SelectedCommande = null;
        selected = null;
        commande = new Commande();
        _commandeVisibility = false;

        
    }
    private string GetRowStyle(Commande commande)
    {
        return selected == commande ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }

    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cet commande ??");
        return confirmed;
    }
    //@functions {
    //    string GetRowStyle(Commande commande, bool isSelected)
    //    {
    //        if (isSelected)
    //        {
    //            return "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;";
    //        }
    //        else
    //        {
    //            return string.Empty;
    //        }
    //    }
    //}


}
