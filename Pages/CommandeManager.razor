@page "/commande"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@*@using System*@


<PageTitle>Gestion des commandes</PageTitle>
<BlazoredToasts />

<h1>Gestion des commandes</h1>

@*<button class="btn btn-primary" @onclick="NewCommande"><i class="oi oi-plus"></i> Nouvelle Commande</button>
*@


@if (commande.Id_Date is not null)
{
    <h3>Détails de la Commande : @commande.Id_Date?.ToString("yyyyMMdd")</h3>
}

@if (selected is not null)
{
    <button type="button" class="btn btn-secondary m-2" @onclick="Reset"><i class="oi oi-loop-circular"></i>Reset</button>
    @if (commande.DeletedAt is null)
    {
        <button type="button" class="btn btn-danger m-2" @onclick="DeleteCommande"><i class="oi oi-trash"></i>Delete</button>
    }
    else
    {
        <button type="button" class="btn btn-info m-2" @onclick="RestoreDeletedCommande"><i class="oi oi-action-undo"></i>Restaurer</button>
        <button type="button" class="btn btn-danger m-2" @onclick="DeleteCompleteCommande"><i class="oi oi-trash"></i> Effacer définitivement</button>
    }
}
else
{
    <button type="button" class="btn btn-primary m-2" @onclick="AddCommande"><i class="oi oi-check"></i>Ajouter une commande</button>
}
<div class="row">
    <div class="col-md-8">
        @if (isLoading)
        {
            <div class="skeleton-loader">
                <div class="loader"></div>
                <div>Loading...</div>
            </div>
        }
        else
        {
            <Table Hoverable Striped>
            <TableHeader ThemeContrast="ThemeContrast.Dark">
                <TableRow>
                    <TableHeaderCell>#</TableHeaderCell>
                    <TableHeaderCell>Commande</TableHeaderCell>
                    <TableHeaderCell>Date de la Commande</TableHeaderCell>
                    <TableHeaderCell>Prix Htva</TableHeaderCell>
                    <TableHeaderCell>Prix TvaC</TableHeaderCell>
                    <TableHeaderCell>Date Delete</TableHeaderCell>
                    <TableHeaderCell>Détails</TableHeaderCell>
                </TableRow>
            </TableHeader>

            <TableBody>
                @foreach (Commande commande in StateContainer.Commandes.Skip((currentPageAsInt - 1) * PageSize).Take(PageSize))
                    {
                        var isSelected = StateContainer.SelectedCommande?.Equals(commande) ?? false;
                        var style = isSelected ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;

                        <TableRow @onclick="(() => SelectCommande(commande))" style="@style">
                            <TableRowHeader>@commande.Id</TableRowHeader>
                            <TableRowCell>
                                @if (commande.Id_Date != null)
                                {
                                    @(((DateTime)commande.Id_Date).ToString("yyyyMMdd"))
                                }
                            </TableRowCell>
                            <TableRowCell>@commande.DateCommande</TableRowCell>
                            <TableRowCell>@commande.PrixHtva €</TableRowCell>
                            <TableRowCell>@commande.PrixTvaC €</TableRowCell>
                            <TableRowCell>@commande.DeletedAt</TableRowCell>
                            <TableRowCell>
                                <button type="button" class="btn btn-primary" @onclick="() => RedirectToDetails(commande?.Id?.ToString())">
                                    <i class="oi oi-info"></i> Détails
                                </button>
                            </TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>

            @*Système de pagination*@
            <div style="display: flex; justify-content: center;">
            <Pagination>
                <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                    <PaginationLink>
                        <span aria-hidden="true">«</span>
                    </PaginationLink>
                </PaginationItem>

                @{
                    var totalPages = (int)Math.Ceiling((double)StateContainer.Commandes.Count / PageSize);
                    for (var i = 1; i <= totalPages; i++)
                    {
                        var pageNumberAsString = i.ToString();
                        <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                            <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                                @pageNumberAsString
                            </PaginationLink>
                        </PaginationItem>
                    }
                }

                <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                    <PaginationLink>
                        <span aria-hidden="true">»</span>
                    </PaginationLink>
                </PaginationItem>
            </Pagination>
            </div>
        }
    </div>


</div>

@code {
    Commande commande = new Commande();
    private Commande? selected = null;

    public void HandlePuHtvaCalculated(double calculatedValue)
    {
        _PuHtvaValue = calculatedValue;
    }
    [Parameter]
    public Action? OnCommandeSelected { get; set; }
    private Action? OnCommandeUpdated;

    [Parameter]
    public double _PuHtvaValue { get; set; }


    private double PrixTotal { get; set; }
    private bool isLoading = true;

    



    protected override async Task OnInitializedAsync()
    {
        this.OnCommandeUpdated = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
        this.OnCommandeSelected = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };

        StateContainer.OnCommandeUpdated += this.OnCommandeUpdated;
        StateContainer.OnCommandeSelected += this.OnCommandeSelected;
        isLoading = true; // Activer le loader
        await GetCommandes();
        await GetArticles();
        isLoading = false; // Désactiver le loader
    }

    public async Task GetCommandes()

    {

        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/commande/getall");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var commandes = await response.Content.ReadFromJsonAsync<List<Commande>>();

                if (commandes != null)
                {
                    StateContainer.Commandes = commandes;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }

    }

    public async Task GetArticles()
    {


        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/article/getall");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var articles = await response.Content.ReadFromJsonAsync<List<Article>>();

                if (articles != null)
                {
                    StateContainer.Articles = articles;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }


    }

    private async Task NewCommande()
    {
        await Reset();
    }

    private async Task AddCommande()
    {




        var newCommande = new Commande
            {
                Id = Guid.NewGuid(),
                Id_Date = DateTime.Now,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,

            };
        if (newCommande is not null)
        {
            var content = JsonContent.Create(newCommande);

            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/add");
            requestMsg.Content = content;

            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {

                    ToastService.ShowSuccess("Commande ajoutée!");
                    StateContainer.Commandes?.Add(newCommande);
                    //Délai d'une seconde
                    await Task.Delay(1000);

                    RedirectToDetails(newCommande?.Id?.ToString());

                }
                else
                {
                    ToastService.ShowError("Une erreur s'est produite.");
                }
            }
            await Reset();
        }
    }

    // Mettre à jour une commande
    private async Task UpdateCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {
                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = commande.DeletedAt,
            };


        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Commandes.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Commandes[index] = commandeUpdate;

                    StateContainer.NotifyCommandesUpdated();

                }
                ToastService.ShowSuccess("Commande mise à jour!");
                await Reset();
            }
        }
    }

    // Delete Commande
    private async Task DeleteCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {

                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                ToastService.ShowWarning("Commande effacée");
                await Reset();

            }
        }
    }
    // Delete Commande
    private async Task RestoreDeletedCommande()
    {
        if (selected is null)
        {
            return;
        }

        var commandeUpdate = new Commande
            {

                Id = this.selected.Id,
                Id_Date = commande.Id_Date,
                DateCommande = commande.DateCommande,
                PrixHtva = commande.PrixHtva,
                PrixTvaC = commande.PrixTvaC,
                CreatedAt = commande.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/update");
        requestMsg.Content = JsonContent.Create(commandeUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                ToastService.ShowInfo("Commande restaurée");
                await Reset();
            }
        }
    }
    // Effacer une Commande
    private async Task DeleteCompleteCommande()
    {
        if (selected is null)
        {
            return;
        }
        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }
        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/commande/delete");
        requestMsg.Content = JsonContent.Create(selected);
        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                StateContainer.Commandes.Remove(selected);
                UnSelectCommande();
                ToastService.ShowWarning("Commande complètement effacée");
                await Reset();
            }
            else
            {
                string errorMessage = await msg.Content.ReadAsStringAsync();
                ToastService.ShowError(errorMessage);
            }
        }
    }
    // RESET
    private async Task Reset()
    {

        UnSelectCommande();
        await InvokeAsync(StateHasChanged);
        await GetCommandes();
    }
    // Selectionner une commande
    private void SelectCommande(Commande comm)
    {
        StateContainer.SelectedCommande = comm;
        selected = comm;
        commande = comm;
    }


    private void UnSelectCommande()
    {
        StateContainer.SelectedCommande = null;
        selected = null;
        commande = new Commande();


    }


    private void RedirectToDetails(string commandeId)
    {
        if (commandeId != null)
        {
            NavigationManager.NavigateTo($"/commande/get/{commandeId}");
        }
    }



    private string GetRowStyle(Commande commande)
    {
        return selected == commande ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }

    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cet commande ??");
        return confirmed;
    }
    //système de pagination

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int currentPageAsInt = 1;
    private const int PageSize = 10;

    private bool IsActive(string page)
        => currentPageAsInt.ToString() == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPageAsInt == 1;
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPageAsInt == (int)Math.Ceiling((double)StateContainer.Commandes.Count / PageSize);
        }
        return false;
    }

    private void Previous()
    {
        if (currentPageAsInt > 1)
        {
            currentPageAsInt -= 1;
        }
    }

    private void Next()
    {
        if (currentPageAsInt < (int)Math.Ceiling((double)StateContainer.Commandes.Count / PageSize))
        {
            currentPageAsInt += 1;
        }
    }

    private void SetActive(string page)
        => currentPageAsInt = int.Parse(page);


}
